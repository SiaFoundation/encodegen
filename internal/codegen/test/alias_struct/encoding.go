// Code generated by encodegen. DO NOT EDIT.
package alias_struct

import (
	"go.sia.tech/encodegen/pkg/encodegen"
)

// MarshalBuffer implements MarshalerBuffer
func (s *AliasByteSlice) MarshalBuffer(b *encodegen.ObjBuffer) {
	if s != nil {

		b.WriteUint64(uint64(len(*s)))
		b.Write([]byte(*s))

	}
}

// UnmarshalBuffer implements encodegen's UnmarshalerBuffer
func (s *AliasByteSlice) UnmarshalBuffer(b *encodegen.ObjBuffer) error {
	if s != nil {
		var length int = 0
		_ = length

		length = int(b.ReadUint64())
		if length > 0 {
			if len(*s) < length {
				*s = make([]byte, length)
			}
			(*s) = (*s)[:length]
			b.Read(*s)
		}

	}
	return b.Err()
}

// MarshalBuffer implements MarshalerBuffer
func (a *AliasFixedByteArray) MarshalBuffer(b *encodegen.ObjBuffer) {
	if a != nil {

		temp := [40]byte(*a)
		b.Write([]byte(temp[:]))

	}
}

// UnmarshalBuffer implements encodegen's UnmarshalerBuffer
func (a *AliasFixedByteArray) UnmarshalBuffer(b *encodegen.ObjBuffer) error {
	if a != nil {
		var length int = 0
		_ = length

		temp := [40]byte(*a)
		b.Read(temp[:])
		*a = temp

	}
	return b.Err()
}

// MarshalBuffer implements MarshalerBuffer
func (a *AliasFixedPointerArray) MarshalBuffer(b *encodegen.ObjBuffer) {
	if a != nil {

		temp := [3]*uint16(*a)
		for i := range temp {
			if temp[i] != nil {
				b.WriteBool(true)
				b.WriteUint64(uint64(*temp[i]))
			} else {
				b.WriteBool(false)
			}
		}

	}
}

// UnmarshalBuffer implements encodegen's UnmarshalerBuffer
func (a *AliasFixedPointerArray) UnmarshalBuffer(b *encodegen.ObjBuffer) error {
	if a != nil {
		var length int = 0
		_ = length

		for i := range *a {
			if b.ReadBool() {
				if (*a)[i] == nil {
					(*a)[i] = new(uint16)
				}
				*(*a)[i] = uint16((b.ReadUint64()))
			}
		}

	}
	return b.Err()
}

// MarshalBuffer implements MarshalerBuffer
func (a *AliasFixedSubMessageArray) MarshalBuffer(b *encodegen.ObjBuffer) {
	if a != nil {

		temp := [3]SubMessage(*a)
		for i := range temp {
			(*SubMessage)(&temp[i]).MarshalBuffer(b)
		}

	}
}

// UnmarshalBuffer implements encodegen's UnmarshalerBuffer
func (a *AliasFixedSubMessageArray) UnmarshalBuffer(b *encodegen.ObjBuffer) error {
	if a != nil {
		var length int = 0
		_ = length

		for i := range *a {
			(*SubMessage)(&(*a)[i]).UnmarshalBuffer(b)
		}

	}
	return b.Err()
}

// MarshalBuffer implements MarshalerBuffer
func (a *AliasFixedSubMessagePointerArray) MarshalBuffer(b *encodegen.ObjBuffer) {
	if a != nil {

		temp := [3]*SubMessage(*a)
		for i := range temp {
			if temp[i] != nil {
				b.WriteBool(true)
				(*SubMessage)(temp[i]).MarshalBuffer(b)
			} else {
				b.WriteBool(false)
			}
		}

	}
}

// UnmarshalBuffer implements encodegen's UnmarshalerBuffer
func (a *AliasFixedSubMessagePointerArray) UnmarshalBuffer(b *encodegen.ObjBuffer) error {
	if a != nil {
		var length int = 0
		_ = length

		for i := range *a {
			if b.ReadBool() {
				if (*a)[i] == nil {
					(*a)[i] = new(SubMessage)
				}
				(*SubMessage)((*a)[i]).UnmarshalBuffer(b)
			}
		}

	}
	return b.Err()
}

// MarshalBuffer implements MarshalerBuffer
func (m *Message) MarshalBuffer(b *encodegen.ObjBuffer) {
	if m != nil {

		b.WriteUint64(uint64(m.Id))

		b.WriteUint64(uint64(len(m.ByteSlice)))
		b.Write(m.ByteSlice)

		(*AliasByteSlice)(&m.AliasByteSliceField).MarshalBuffer(b)

		(*AliasFixedByteArray)(&m.AliasFixedByteArrayField).MarshalBuffer(b)

		(*AliasFixedPointerArray)(&m.AliasFixedPointerArrayField).MarshalBuffer(b)

		(*AliasFixedSubMessageArray)(&m.AliasFixedSubMessageArrayField).MarshalBuffer(b)

		(*AliasFixedSubMessagePointerArray)(&m.AliasFixedSubMessagePointerArrayField).MarshalBuffer(b)

		for i := range m.AliasFixedByteArrayArrayField {
			m.AliasFixedByteArrayArrayField[i].MarshalBuffer(b)
		}

		for i := range m.AliasFixedPointerArrayArrayField {
			m.AliasFixedPointerArrayArrayField[i].MarshalBuffer(b)
		}

		for i := range m.AliasFixedSubMessageArrayArrayField {
			m.AliasFixedSubMessageArrayArrayField[i].MarshalBuffer(b)
		}

		for i := range m.AliasFixedSubMessagePointerArrayArrayField {
			m.AliasFixedSubMessagePointerArrayArrayField[i].MarshalBuffer(b)
		}

	}
}

// UnmarshalBuffer implements encodegen's UnmarshalerBuffer
func (m *Message) UnmarshalBuffer(b *encodegen.ObjBuffer) error {
	if m != nil {
		var length int = 0
		_ = length

		m.Id = int(b.ReadUint64())

		length = int(b.ReadUint64())
		if length > 0 {
			if len(m.ByteSlice) < length {
				m.ByteSlice = make([]byte, length)
			}
			m.ByteSlice = m.ByteSlice[:length]
			b.Read(m.ByteSlice)
		}

		(*AliasByteSlice)(&m.AliasByteSliceField).UnmarshalBuffer(b)

		(*AliasFixedByteArray)(&m.AliasFixedByteArrayField).UnmarshalBuffer(b)

		(*AliasFixedPointerArray)(&m.AliasFixedPointerArrayField).UnmarshalBuffer(b)

		(*AliasFixedSubMessageArray)(&m.AliasFixedSubMessageArrayField).UnmarshalBuffer(b)

		(*AliasFixedSubMessagePointerArray)(&m.AliasFixedSubMessagePointerArrayField).UnmarshalBuffer(b)

		for i := range m.AliasFixedByteArrayArrayField {
			(*AliasFixedByteArray)(&m.AliasFixedByteArrayArrayField[i]).UnmarshalBuffer(b)
		}

		for i := range m.AliasFixedPointerArrayArrayField {
			(*AliasFixedPointerArray)(&m.AliasFixedPointerArrayArrayField[i]).UnmarshalBuffer(b)
		}

		for i := range m.AliasFixedSubMessageArrayArrayField {
			(*AliasFixedSubMessageArray)(&m.AliasFixedSubMessageArrayArrayField[i]).UnmarshalBuffer(b)
		}

		for i := range m.AliasFixedSubMessagePointerArrayArrayField {
			(*AliasFixedSubMessagePointerArray)(&m.AliasFixedSubMessagePointerArrayArrayField[i]).UnmarshalBuffer(b)
		}

	}
	return b.Err()
}

// MarshalBuffer implements MarshalerBuffer
func (m *SubMessage) MarshalBuffer(b *encodegen.ObjBuffer) {
	if m != nil {

		b.WriteUint64(uint64(m.Id))

		b.WritePrefixedBytes(encodegen.StringToBytes(m.Description))

		b.WriteUint64(uint64(len(m.Strings)))
		for i := range m.Strings {
			b.WritePrefixedBytes(encodegen.StringToBytes(m.Strings[i]))
		}

	}
}

// UnmarshalBuffer implements encodegen's UnmarshalerBuffer
func (m *SubMessage) UnmarshalBuffer(b *encodegen.ObjBuffer) error {
	if m != nil {
		var length int = 0
		_ = length

		m.Id = int(b.ReadUint64())

		m.Description = string(b.ReadPrefixedBytes())

		length = int(b.ReadUint64())
		if length > 0 {
			if len(m.Strings) < length {
				m.Strings = make([]string, length)
			}
			m.Strings = m.Strings[:length]
			for i := range m.Strings {
				m.Strings[i] = string(encodegen.BytesToString(b.ReadPrefixedBytes()))
			}
		}

	}
	return b.Err()
}
