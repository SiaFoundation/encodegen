package medium_struct

import (
	"reflect"
	// "log"
	"gitlab.com/NebulousLabs/encoding"
	"go.sia.tech/encodegen/pkg/encodegen"
	"testing"
)

var isTrue = true

var testInt int = 999
var testString string = "This string is a test"

var msg = Message{
	Id:   1022,
	Name: "name acc",
	Ints: []*int{&testInt, &testInt, &testInt},
	SubMessageX: &SubMessage{
		Id:          102,
		Description: "abcd",
	},
	MessagesX: []*SubMessage{
		{
			Id:             2102,
			Description:    "abce",
			Strings:        []string{"WASDF", "FDSAW"},
			PointerStrings: []*string{&testString, nil, &testString, &testString, &testString, &testString, &testString, &testString, &testString},
		},
	},
	SubMessageY: SubMessage{
		Id:          3102,
		Description: "abcf",
		Strings:     []string{"Test", "Test2", "TTTTT"},
	},
	MessagesY: []SubMessage{
		{
			Description:    "abcg",
			PointerStrings: []*string{&testString, &testString, nil, nil, nil, &testString, &testString, &testString, nil, &testString, &testString, &testString},
		},
		{
			Id:          5106,
			Description: "abcgg",
		},
	},
	IsTrue:  &isTrue,
	Payload: []byte(`"123"`),
	Uint64:  999999,
}

func TestMessage(t *testing.T) {
	bufferOfficial := encoding.Marshal(msg)

	bufferUnofficial := &encodegen.ObjBuffer{}
	msg.MarshalBuffer(bufferUnofficial)

	if !reflect.DeepEqual(bufferOfficial, bufferUnofficial.Bytes()) {
		t.Errorf("Our generated buffer (%+v) does not equal the one generated by the official library (%+v)", bufferUnofficial.Bytes(), bufferOfficial)
	}

	newMessageUnofficial := Message{}
	(*Message)(&newMessageUnofficial).UnmarshalBuffer(bufferUnofficial)

	newBufferOfficial := &encodegen.ObjBuffer{}
	newBufferOfficial.Write(bufferOfficial)
	newMessageOfficial := Message{}
	(*Message)(&newMessageOfficial).UnmarshalBuffer(newBufferOfficial)

	if !reflect.DeepEqual(newMessageOfficial, newMessageUnofficial) {
		t.Errorf("Our deserialized buffer (%+v) does not equal the one generated by the official library (%+v)", newMessageUnofficial, newMessageOfficial)
	}

}
