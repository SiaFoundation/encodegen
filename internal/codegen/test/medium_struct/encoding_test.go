package medium_struct

import (
	// "log"
	"github.com/stretchr/testify/assert"
	"gitlab.com/NebulousLabs/encoding"
	"go.sia.tech/encodegen/pkg/encodegen"
	"testing"
)

var isTrue = true

var testInt int = 999
var testString string = "This string is a test"
var testAliasInt AliasInt = AliasInt(9001)

var msg = Message{
	Id:   1022,
	Name: "A",
	Names: nil,
	Ints: []*int{&testInt, nil, &testInt},
	SubMessageX: &SubMessage{
		Id:          102,
		Description: "abcd",
		Strings:     []string{"W", "X", "Y", "Z"},
		PointerStrings: []*string{&testString},
	},
	MessagesX: []*SubMessage{
		{
			Id:          2102,
			Description: "abce",
			Strings:     []string{"WASDF", "FDSAW"},
		PointerStrings: []*string{nil},
		},
	},
	SubMessageY: SubMessage{
		Id:          3102,
		Description: "abcf",
		Strings:     []string{"Test", "Test2", "TTTTT"},
		PointerStrings: []*string{nil, nil, nil, &testString},
	},
	MessagesY: []SubMessage{
		{
			Description: "abcg",
			Strings:     []string{"8", "7", "6"},
		},
		{
			Id:          5106,
			Description: "abcgg",
			Strings:     []string{"9"},
		},
	},
	IsTrue:  &isTrue,
	Payload: []byte(`"123"`),
	Uint64:  999999,
	AliasedSubmessage: AliasSubMessage(SubMessage{
		Id:      444,
		Strings: []string{"9"},
	}),
	DoubleAliasedSubmessage: DoubleAliasSubMessage(AliasSubMessage(SubMessage{
		Id:          321,
		Description: "amazing",
		Strings:     []string{"9"},
	})),
	ArrayAliasSubmessage: []AliasSubMessage{AliasSubMessage(SubMessage{
		Id:      1,
		Strings: []string{"A"},
	})},
	AliasInt:        testAliasInt,
	PointerAliasInt: &testAliasInt,
	ArrayAliasInt:   []AliasInt{testAliasInt, testAliasInt, testAliasInt},
	DoubleAliasInt:  DoubleAliasInt(testAliasInt),
}

func TestMessage(t *testing.T) {
	bufferOfficial := encoding.Marshal(msg)

	bufferUnofficial := &encodegen.ObjBuffer{}
	msg.MarshalBuffer(bufferUnofficial)

	assert.Equal(t, bufferOfficial, bufferUnofficial.Bytes(), "Generated buffer does not equal one generated by reflection")

	newMessageUnofficial := Message{}
	(*Message)(&newMessageUnofficial).UnmarshalBuffer(bufferUnofficial)

	newMessageOfficial := Message{}
	encoding.Unmarshal(bufferOfficial, &newMessageOfficial)

	assert.Equal(t, newMessageOfficial, newMessageUnofficial, "Unmarshaled struct does not equal one generated by reflection")
}
