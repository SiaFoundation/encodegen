// Code generated by encodegen. DO NOT EDIT.
package medium_struct

import (
	"go.sia.tech/encodegen/pkg/encodegen"
)

// MarshalBuffer implements MarshalerBuffer
func (m *Message) MarshalBuffer(b *encodegen.ObjBuffer) {

	b.WriteUint64(uint64(m.Id))

	b.WritePrefixedBytes([]byte(m.Name))

	b.WriteUint64(uint64(len(m.Ints)))
	for i := range m.Ints {

		if m.Ints[i] != nil {
			b.WriteBool(true)
			b.WriteUint64(uint64(*m.Ints[i]))

		} else {
			b.WriteBool(false)
		}

	}

	if m.SubMessageX != nil {
		b.WriteBool(true)
		(*SubMessage)(m.SubMessageX).MarshalBuffer(b)
	} else {
		b.WriteBool(false)
	}

	b.WriteUint64(uint64(len(m.MessagesX)))
	for i := range m.MessagesX {

		if m.MessagesX[i] != nil {
			b.WriteBool(true)

			m.MessagesX[i].MarshalBuffer(b)

		} else {
			b.WriteBool(false)
		}

	}

	(*SubMessage)(&m.SubMessageY).MarshalBuffer(b)

	b.WriteUint64(uint64(len(m.MessagesY)))
	for i := range m.MessagesY {

		m.MessagesY[i].MarshalBuffer(b)

	}

	if m.IsTrue != nil {
		b.WriteBool(true)

		b.WriteBool((*m.IsTrue))

	} else {
		b.WriteBool(false)
	}

	b.WriteUint64(uint64(len(m.Payload)))
	for i := range m.Payload {

		b.WriteByte((m.Payload[i]))

	}

	b.WriteUint64((m.Uint64))

}

// UnmarshalBuffer implements encodegen's UnmarshalerBuffer
func (m *Message) UnmarshalBuffer(b *encodegen.ObjBuffer) error {

	m.Id = int(b.ReadUint64())

	m.Name = string(b.ReadPrefixedBytes())

	m.Ints = make([]*int, int(b.ReadUint64()))
	for i := range m.Ints {

		if b.ReadBool() {
			if m.Ints[i] == nil {
				m.Ints[i] = new(int)
			}
			*m.Ints[i] = int(b.ReadUint64())
		}

	}

	if b.ReadBool() {
		if m.SubMessageX == nil {
			m.SubMessageX = new(SubMessage)
		}
		(*SubMessage)(m.SubMessageX).UnmarshalBuffer(b)
	}

	m.MessagesX = make([]*SubMessage, int(b.ReadUint64()))
	for i := range m.MessagesX {

		if b.ReadBool() {
			if m.MessagesX[i] == nil {
				m.MessagesX[i] = new(SubMessage)
			}
			m.MessagesX[i].UnmarshalBuffer(b)
		}

	}

	(*SubMessage)(&m.SubMessageY).UnmarshalBuffer(b)

	m.MessagesY = make([]SubMessage, int(b.ReadUint64()))
	for i := range m.MessagesY {

		(*SubMessage)(&m.MessagesY[i]).UnmarshalBuffer(b)

	}

	if b.ReadBool() {
		if m.IsTrue == nil {
			m.IsTrue = new(bool)
		}
		*m.IsTrue = bool(b.ReadBool())
	}

	m.Payload = make([]byte, int(b.ReadUint64()))
	for i := range m.Payload {

		m.Payload[i] = byte(b.ReadByte())

	}

	m.Uint64 = uint64(b.ReadUint64())

	return b.Err()
}

// MarshalBuffer implements MarshalerBuffer
func (m *SubMessage) MarshalBuffer(b *encodegen.ObjBuffer) {

	b.WriteUint64(uint64(m.Id))

	b.WritePrefixedBytes([]byte(m.Description))

	b.WriteUint64(uint64(len(m.Strings)))
	for i := range m.Strings {

		b.WritePrefixedBytes([]byte(m.Strings[i]))

	}

	b.WriteUint64(uint64(len(m.PointerStrings)))
	for i := range m.PointerStrings {

		if m.PointerStrings[i] != nil {
			b.WriteBool(true)
			b.WritePrefixedBytes([]byte(*m.PointerStrings[i]))

		} else {
			b.WriteBool(false)
		}

	}

}

// UnmarshalBuffer implements encodegen's UnmarshalerBuffer
func (m *SubMessage) UnmarshalBuffer(b *encodegen.ObjBuffer) error {

	m.Id = int(b.ReadUint64())

	m.Description = string(b.ReadPrefixedBytes())

	m.Strings = make([]string, int(b.ReadUint64()))
	for i := range m.Strings {

		m.Strings[i] = string(b.ReadPrefixedBytes())

	}

	m.PointerStrings = make([]*string, int(b.ReadUint64()))
	for i := range m.PointerStrings {

		if b.ReadBool() {
			if m.PointerStrings[i] == nil {
				m.PointerStrings[i] = new(string)
			}
			*m.PointerStrings[i] = string(b.ReadPrefixedBytes())
		}

	}

	return b.Err()
}
