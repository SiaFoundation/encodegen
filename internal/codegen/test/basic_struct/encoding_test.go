package basic_struct

import (
	"reflect"
	// "log"
	"go.sia.tech/encodegen/encodegen"
	"gitlab.com/NebulousLabs/encoding"
	"testing"
)

var isTrue = true
var msg = Message{
	Id:   1022,
	Name: "name acc",
	Ints: []int{1, 2, 5},
	SubMessageX: &SubMessage{
		Id:          102,
		Description: "abcd",
	},
	MessagesX: []*SubMessage{
		{
			Id:          2102,
			Description: "abce",
		},
	},
	SubMessageY: SubMessage{
		Id:          3102,
		Description: "abcf",
	},
	MessagesY: []SubMessage{
		{
			Id:          5102,
			Description: "abcg",
		},
		{
			Id:          5106,
			Description: "abcgg",
		},
	},
	IsTrue:  &isTrue,
	Payload: []byte(`"123"`),
}

// func TestMessage_Unmarshal(t *testing.T) {
// 	var err error
// 	var data = []byte(jsonData)
// 	message := &Message{}
// 	err = gojay.UnmarshalJSONObject(data, message)
// 	require.Nil(t, err)
// 	require.Equal(t, msg, message)
// }

func TestMessage_Marshal(t *testing.T) {
	bufferOfficial := encoding.Marshal(msg)

	bufferUnofficial := &encodegen.ObjBuffer{}
	msg.MarshalBuffer(bufferUnofficial)

	if !reflect.DeepEqual(bufferOfficial, bufferUnofficial.Bytes()) {
		t.Errorf("Our generated buffer does not equal the one generated by the official library")
	}


	newMessageUnofficial := Message{}
	(*Message)(&newMessageUnofficial).UnmarshalBuffer(bufferUnofficial)

	newBufferOfficial := &encodegen.ObjBuffer{}
	newBufferOfficial.Write(bufferOfficial)
	newMessageOfficial := Message{}
	(*Message)(&newMessageOfficial).UnmarshalBuffer(newBufferOfficial)

	if !reflect.DeepEqual(newMessageOfficial, newMessageUnofficial) {
		t.Errorf("Our deserialized buffer does not equal the one generated by the official library")
	}


}
