// Code generated by encodegen. DO NOT EDIT.
package basic_struct

import (
	"go.sia.tech/encodegen/pkg/encodegen"
)

// MarshalBuffer implements MarshalerBuffer
func (m *Message) MarshalBuffer(b *encodegen.ObjBuffer) {
	if m != nil {

		b.WriteUint64(uint64(m.Id))

		b.WritePrefixedBytes(encodegen.StringToBytes(m.Name))

		b.WriteUint64(uint64(len(m.Ints)))
		for i := range m.Ints {
			b.WriteUint64(uint64(m.Ints[i]))
		}

		if m.SubMessageX != nil {
			b.WriteBool(true)
			(*SubMessage)(m.SubMessageX).MarshalBuffer(b)
		} else {
			b.WriteBool(false)
		}

		b.WriteUint64(uint64(len(m.MessagesX)))
		for i := range m.MessagesX {
			if m.MessagesX[i] != nil {
				b.WriteBool(true)
				m.MessagesX[i].MarshalBuffer(b)
			} else {
				b.WriteBool(false)
			}
		}

		(*SubMessage)(&m.SubMessageY).MarshalBuffer(b)

		b.WriteUint64(uint64(len(m.MessagesY)))
		for i := range m.MessagesY {
			m.MessagesY[i].MarshalBuffer(b)
		}

		if m.IsTrue != nil {
			b.WriteBool(true)
			b.WriteBool((*m.IsTrue))
		} else {
			b.WriteBool(false)
		}

		b.WriteUint64(uint64(len(m.Payload)))
		b.Write(m.Payload)

		b.WriteUint64(uint64(len(m.Strings)))
		for i := range m.Strings {
			b.WritePrefixedBytes(encodegen.StringToBytes(m.Strings[i]))
		}

		b.Write(m.FixedBytes[:])

		for i := range m.FixedInts {
			b.WriteUint64(uint64(m.FixedInts[i]))
		}

		for i := range m.FixedIntPointers {
			if m.FixedIntPointers[i] != nil {
				b.WriteBool(true)
				b.WriteUint64(uint64(*m.FixedIntPointers[i]))
			} else {
				b.WriteBool(false)
			}
		}

		for i := range m.FixedUint8s {
			b.WriteByte(uint8(m.FixedUint8s[i]))
		}

		for i := range m.FixedSubMessage {
			m.FixedSubMessage[i].MarshalBuffer(b)
		}

		for i := range m.FixedPointerSubMessage {
			if m.FixedPointerSubMessage[i] != nil {
				b.WriteBool(true)
				m.FixedPointerSubMessage[i].MarshalBuffer(b)
			} else {
				b.WriteBool(false)
			}
		}

	}
}

// UnmarshalBuffer implements encodegen's UnmarshalerBuffer
func (m *Message) UnmarshalBuffer(b *encodegen.ObjBuffer) error {
	if m != nil {
		var length int = 0

		m.Id = int(b.ReadUint64())

		m.Name = string(b.ReadPrefixedBytes())

		length = int(b.ReadUint64())
		if length > 0 {
			if len(m.Ints) < length {
				m.Ints = make([]int, length)
			}
			m.Ints = m.Ints[:length]
			for i := range m.Ints {
				if i == length {
					break
				}
				m.Ints[i] = int((b.ReadUint64()))
			}
		}

		if b.ReadBool() {
			if m.SubMessageX == nil {
				m.SubMessageX = new(SubMessage)
			}
			(*SubMessage)(m.SubMessageX).UnmarshalBuffer(b)
		}

		length = int(b.ReadUint64())
		if length > 0 {
			if len(m.MessagesX) < length {
				m.MessagesX = make([]*SubMessage, length)
			}
			m.MessagesX = m.MessagesX[:length]
			for i := range m.MessagesX {
				if i == length {
					break
				}
				if b.ReadBool() {
					if m.MessagesX[i] == nil {
						m.MessagesX[i] = new(SubMessage)
					}
					m.MessagesX[i].UnmarshalBuffer(b)
				}
			}
		}

		(*SubMessage)(&m.SubMessageY).UnmarshalBuffer(b)

		length = int(b.ReadUint64())
		if length > 0 {
			if len(m.MessagesY) < length {
				m.MessagesY = make([]SubMessage, length)
			}
			m.MessagesY = m.MessagesY[:length]
			for i := range m.MessagesY {
				if i == length {
					break
				}
				(*SubMessage)(&m.MessagesY[i]).UnmarshalBuffer(b)
			}
		}

		if b.ReadBool() {
			if m.IsTrue == nil {
				m.IsTrue = new(bool)
			}
			*m.IsTrue = bool((b.ReadBool()))
		}

		length = int(b.ReadUint64())
		if length > 0 {
			if len(m.Payload) < length {
				m.Payload = make([]byte, length)
			}
			m.Payload = m.Payload[:length]
			b.Read(m.Payload)
		}

		length = int(b.ReadUint64())
		if length > 0 {
			if len(m.Strings) < length {
				m.Strings = make([]string, length)
			}
			m.Strings = m.Strings[:length]
			for i := range m.Strings {
				if i == length {
					break
				}
				m.Strings[i] = string(encodegen.BytesToString(b.ReadPrefixedBytes()))
			}
		}

		b.Read(m.FixedBytes[:])

		for i := range m.FixedInts {
			m.FixedInts[i] = int((b.ReadUint64()))
		}

		for i := range m.FixedIntPointers {
			if b.ReadBool() {
				if m.FixedIntPointers[i] == nil {
					m.FixedIntPointers[i] = new(int)
				}
				*m.FixedIntPointers[i] = int((b.ReadUint64()))
			}
		}

		for i := range m.FixedUint8s {
			m.FixedUint8s[i] = uint8((b.ReadByte()))
		}

		for i := range m.FixedSubMessage {
			(*SubMessage)(&m.FixedSubMessage[i]).UnmarshalBuffer(b)
		}

		for i := range m.FixedPointerSubMessage {
			if b.ReadBool() {
				if m.FixedPointerSubMessage[i] == nil {
					m.FixedPointerSubMessage[i] = new(SubMessage)
				}
				m.FixedPointerSubMessage[i].UnmarshalBuffer(b)
			}
		}

	}
	return b.Err()
}

// MarshalBuffer implements MarshalerBuffer
func (m *SubMessage) MarshalBuffer(b *encodegen.ObjBuffer) {
	if m != nil {

		b.WriteUint64(uint64(m.Id))

		b.WritePrefixedBytes(encodegen.StringToBytes(m.Description))

		b.WriteUint64(uint64(len(m.Strings)))
		for i := range m.Strings {
			b.WritePrefixedBytes(encodegen.StringToBytes(m.Strings[i]))
		}

	}
}

// UnmarshalBuffer implements encodegen's UnmarshalerBuffer
func (m *SubMessage) UnmarshalBuffer(b *encodegen.ObjBuffer) error {
	if m != nil {
		var length int = 0

		m.Id = int(b.ReadUint64())

		m.Description = string(b.ReadPrefixedBytes())

		length = int(b.ReadUint64())
		if length > 0 {
			if len(m.Strings) < length {
				m.Strings = make([]string, length)
			}
			m.Strings = m.Strings[:length]
			for i := range m.Strings {
				if i == length {
					break
				}
				m.Strings[i] = string(encodegen.BytesToString(b.ReadPrefixedBytes()))
			}
		}

	}
	return b.Err()
}
