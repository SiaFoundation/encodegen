// Code generated by encodegen. DO NOT EDIT.

package embedded_struct

import (
	"go.sia.tech/encodegen/pkg/encodegen"
)

// MarshalBuffer implements MarshalerBuffer

func (m *Message) MarshalBuffer(b *encodegen.ObjBuffer) {
	if m != nil {

		b.WriteUint64(uint64(m.Id))

		b.WriteUint64(uint64(m.Anonymous.IntegerField))

		b.WritePrefixedBytes([]byte(m.Anonymous.StringField))

		b.WriteUint64(uint64(len(m.Anonymous.IntegerSliceField)))

		for i := range m.Anonymous.IntegerSliceField {

			b.WriteUint64(uint64(m.Anonymous.IntegerSliceField[i]))

		}

		(*SubMessage)(&m.Anonymous.Sub).MarshalBuffer(b)

		b.WriteUint64(uint64(m.End))

	}

}

// UnmarshalBuffer implements encodegen's UnmarshalerBuffer
func (m *Message) UnmarshalBuffer(b *encodegen.ObjBuffer) error {

	if m != nil {

		var length int = 0

		m.Id = int(b.ReadUint64())

		m.Anonymous.IntegerField = int(b.ReadUint64())

		m.Anonymous.StringField = string(b.ReadPrefixedBytes())

		length = int(b.ReadUint64())
		if length > 0 {
			m.Anonymous.IntegerSliceField = make([]int, length)

			for i := range m.Anonymous.IntegerSliceField {

				m.Anonymous.IntegerSliceField[i] = int(b.ReadUint64())

			}
		}

		(*SubMessage)(&m.Anonymous.Sub).UnmarshalBuffer(b)

		m.End = int(b.ReadUint64())

	}
	return b.Err()
}

// MarshalBuffer implements MarshalerBuffer

func (m *SubMessage) MarshalBuffer(b *encodegen.ObjBuffer) {
	if m != nil {

		b.WriteUint64(uint64(m.Id))

		b.WritePrefixedBytes([]byte(m.Description))

		b.WriteUint64(uint64(len(m.Strings)))

		for i := range m.Strings {

			b.WritePrefixedBytes([]byte(m.Strings[i]))

		}

	}

}

// UnmarshalBuffer implements encodegen's UnmarshalerBuffer
func (m *SubMessage) UnmarshalBuffer(b *encodegen.ObjBuffer) error {

	if m != nil {

		var length int = 0

		m.Id = int(b.ReadUint64())

		m.Description = string(b.ReadPrefixedBytes())

		length = int(b.ReadUint64())
		if length > 0 {
			m.Strings = make([]string, length)

			for i := range m.Strings {

				m.Strings[i] = string(b.ReadPrefixedBytes())

			}
		}

	}
	return b.Err()
}
