package embedded_struct

import (
	"github.com/stretchr/testify/assert"
	"gitlab.com/NebulousLabs/encoding"
	"go.sia.tech/encodegen/pkg/encodegen"
	"testing"
)

var anonymous3Struct = struct{ A int }{A: 5000}

var anonymous2Struct = struct {
	IntegerField int
	Anonymous3   *struct {
		A int
	}
}{
	5555,
	&anonymous3Struct,
}

var msg = Message{
	Id: 1022,
	// Anonymous: struct {
	// 	IntegerField      int
	// 	StringField       string
	// 	IntegerSliceField []int
	// 	Sub               SubMessage
	// 	AliasSub          AliasSubMessage
	// }{
	// 	5000,
	// 	"AAA",
	// 	[]int{5, 5, 5, 5},
	// 	SubMessage{Id: 999},
	// 	AliasSubMessage(SubMessage{Id: 999}),
	// },
	Anonymous2: &anonymous2Struct,
	// Anonymous2: nil,
	End: -7222,
}

func TestMessage(t *testing.T) {
	bufferOfficial := encoding.Marshal(msg)

	bufferUnofficial := &encodegen.ObjBuffer{}
	msg.MarshalBuffer(bufferUnofficial)

	assert.Equal(t, bufferOfficial, bufferUnofficial.Bytes(), "Generated buffer does not equal one generated by reflection")

	newMessageUnofficial := Message{}
	(*Message)(&newMessageUnofficial).UnmarshalBuffer(bufferUnofficial)

	newMessageOfficial := Message{}
	encoding.Unmarshal(bufferOfficial, &newMessageOfficial)

	assert.Equal(t, newMessageOfficial, newMessageUnofficial, "Unmarshaled struct does not equal one generated by reflection")
}
